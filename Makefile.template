CC = gcc
CC = clang
LD = clang

BUILD_DIR=build
INC_DIR=include
BINARY=fuck.out

COM_TARGET=compile_commands.json

OBJ_DIR ?= $(BUILD_DIR)/obj

INCLUDES = $(addprefix -I, $(INC_DIR))

CFLAGS += $(INCLUDES)

.DEFAULT_GOAL = app

SRCS = $(shell find src/ -name "*.c")
# SRCS = $(wildcard src/*.c) # if way is different form above, it can not track c file in deeper dir
OBJS = $(SRCS:src/%.c=$(OBJ_DIR)/%.o)
COM_BOJS = $(SRCS:src/%.c=$(OBJ_DIR)/%.o.json)

SLASH = /
gg = $(wildcard src/*)
listf = $(filter $(if $(2),$(addprefix %.,$(2)),%), \
		  $(wildcard $(addsuffix $(SLASH)*,$(1))))

# shorthand:
# 1. % is the same thing, which is used to substitude
# 2. if it is suffix, then % can be omitted

# echo $(addprefix %.,$(SRCS))
# just simple string cancation

# filter
# regex is needed


-include $(OBJS:.o=.d)

# Compilation patterns
$(OBJ_DIR)/%.o: src/%.c Makefile
	@echo + CC $<
	@mkdir -p $(dir $@)
	@$(CC) -MJ $(addsuffix .o.json,$(basename $@)) $(CFLAGS) -c -o $@ $<

.PHONY: app run clean

# $(call listf, src, c)
app:$(BINARY)

$(BINARY): $(OBJS)
	@echo + LD $<
	@$(LD) -o $@ $^
	@echo [ > $(COM_TARGET) && cat $(COM_BOJS) >> $(COM_TARGET) && echo ] >> $(COM_TARGET)


run: $(BINARY)
	./$(BINARY)
	$(call git_commit "fuck")

clean: 
	-/bin/rm -rf $(BUILD_DIR)
